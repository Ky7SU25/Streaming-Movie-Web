// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreamingMovie.Infrastructure.Data;

#nullable disable

namespace StreamingMovie.Infrastructure.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250606155118_Migration-1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("AvatarUrl");

                    b.Property<string>("Biography")
                        .HasColumnType("TEXT")
                        .HasColumnName("Biography");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("DATE")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Nationality");

                    b.HasKey("Id");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EndDate");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("ImageUrl");

                    b.Property<ulong?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(1ul)
                        .HasColumnName("IsActive");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("LinkUrl");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INT")
                        .HasColumnName("MovieId");

                    b.Property<int?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(1)
                        .HasColumnName("Position");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("INT")
                        .HasColumnName("SeriesId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATE")
                        .HasColumnName("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Banner", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Slug");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DislikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("DislikeCount");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INT")
                        .HasColumnName("EpisodeId");

                    b.Property<ulong?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(1ul)
                        .HasColumnName("IsApproved");

                    b.Property<int?>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("LikeCount");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INT")
                        .HasColumnName("MovieId");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INT")
                        .HasColumnName("ParentId");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("INT")
                        .HasColumnName("SeriesId");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.CommentReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<int>("CommentId")
                        .HasColumnType("INT")
                        .HasColumnName("CommentId");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("ReactionType");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReaction", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR(5)")
                        .HasColumnName("Code");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("AvatarUrl");

                    b.Property<string>("Biography")
                        .HasColumnType("TEXT")
                        .HasColumnName("Biography");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("DATE")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Nationality");

                    b.HasKey("Id");

                    b.ToTable("Director", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("DATE")
                        .HasColumnName("AirDate");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int?>("Duration")
                        .HasColumnType("INT")
                        .HasColumnName("Duration");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INT")
                        .HasColumnName("EpisodeNumber");

                    b.Property<ulong?>("IsPremium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(0ul)
                        .HasColumnName("IsPremium");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INT")
                        .HasColumnName("SeasonNumber");

                    b.Property<int>("SeriesId")
                        .HasColumnType("INT")
                        .HasColumnName("SeriesId");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Title");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.EpisodeVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("INT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SubtitleUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("VideoQualityId")
                        .HasColumnType("INT");

                    b.Property<int>("VideoServerId")
                        .HasColumnType("INT");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("VideoQualityId");

                    b.HasIndex("VideoServerId");

                    b.ToTable("EpisodeVideo", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INT")
                        .HasColumnName("MovieId");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("INT")
                        .HasColumnName("SeriesId");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<float?>("ImdbRating")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("OurRating")
                        .HasColumnType("float");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("INT");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("CharacterName");

                    b.Property<ulong?>("IsMainCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(0ul)
                        .HasColumnName("IsMainCharacter");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActor", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieCategory", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INT");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MovieCategory", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieDirector", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("INT");

                    b.HasKey("MovieId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("MovieDirector", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("SubtitleUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("VideoQualityId")
                        .HasColumnType("INT");

                    b.Property<int>("VideoServerId")
                        .HasColumnType("INT");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("VideoQualityId");

                    b.HasIndex("VideoServerId");

                    b.ToTable("MovieVideo", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<ulong?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(0ul)
                        .HasColumnName("IsPublic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.PlaylistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("AddedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INT")
                        .HasColumnName("MovieId");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("INT")
                        .HasColumnName("PlaylistId");

                    b.Property<int>("Position")
                        .HasColumnType("INT")
                        .HasColumnName("Position");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("INT")
                        .HasColumnName("SeriesId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SeriesId");

                    b.ToTable("PlaylistItem", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("longtext");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("ImdbRating")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<float?>("OurRating")
                        .HasColumnType("float");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TotalEpisodes")
                        .HasColumnType("int");

                    b.Property<int?>("TotalSeasons")
                        .HasColumnType("int");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.SeriesActor", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("INT");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("CharacterName");

                    b.Property<ulong?>("IsMainCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(0ul)
                        .HasColumnName("IsMainCharacter");

                    b.HasKey("SeriesId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("SeriesActor", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.SeriesCategory", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INT");

                    b.HasKey("SeriesId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SeriesCategory", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.SeriesDirector", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("INT");

                    b.HasKey("SeriesId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("SeriesDirector", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubscriptionType")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.VideoQuality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<int?>("Bitrate")
                        .HasColumnType("INT")
                        .HasColumnName("Bitrate");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Name");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Resolution");

                    b.HasKey("Id");

                    b.ToTable("VideoQuality", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.VideoServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("BaseUrl");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ulong?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(1ul)
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Name");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(1)
                        .HasColumnName("Priority");

                    b.HasKey("Id");

                    b.ToTable("VideoServer", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.WatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INT")
                        .HasColumnName("EpisodeId");

                    b.Property<ulong?>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(0ul)
                        .HasColumnName("IsCompleted");

                    b.Property<DateTime?>("LastWatchedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("LastWatchedAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INT")
                        .HasColumnName("MovieId");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.Property<int?>("WatchDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("WatchDuration");

                    b.Property<int?>("WatchPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("WatchPosition");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchHistory", (string)null);
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<int>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.UserToken", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<int>");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("UserToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Banner", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("Banners")
                        .HasForeignKey("MovieId");

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("Banners")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Movie");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Comment", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Episode", "Episode")
                        .WithMany("Comments")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId");

                    b.HasOne("StreamingMovie.Domain.Entities.Comment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId");

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("Comments")
                        .HasForeignKey("SeriesId");

                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("Parent");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.CommentReaction", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Comment", "Comment")
                        .WithMany("CommentReactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("CommentReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Episode", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.EpisodeVideo", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodeVideos")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.VideoQuality", "VideoQuality")
                        .WithMany("EpisodeVideos")
                        .HasForeignKey("VideoQualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.VideoServer", "VideoServer")
                        .WithMany("EpisodeVideos")
                        .HasForeignKey("VideoServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("VideoQuality");

                    b.Navigation("VideoServer");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("Favorites")
                        .HasForeignKey("MovieId");

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("Favorites")
                        .HasForeignKey("SeriesId");

                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Movie", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieActor", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieCategory", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieDirector", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Director", "Director")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.MovieVideo", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieVideos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.VideoQuality", "VideoQuality")
                        .WithMany("MovieVideos")
                        .HasForeignKey("VideoQualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.VideoServer", "VideoServer")
                        .WithMany("MovieVideos")
                        .HasForeignKey("VideoServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("VideoQuality");

                    b.Navigation("VideoServer");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Notification", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.PlaylistItem", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("MovieId");

                    b.HasOne("StreamingMovie.Domain.Entities.Playlist", "Playlist")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Movie");

                    b.Navigation("Playlist");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Rating", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId");

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("Ratings")
                        .HasForeignKey("SeriesId");

                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Series", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Country", "Country")
                        .WithMany("Series")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.SeriesActor", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Actor", "Actor")
                        .WithMany("SeriesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("SeriesActors")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.SeriesCategory", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Category", "Category")
                        .WithMany("SeriesCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("SeriesCategories")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.SeriesDirector", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Director", "Director")
                        .WithMany("SeriesDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.Series", "Series")
                        .WithMany("SeriesDirectors")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.WatchHistory", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Episode", "Episode")
                        .WithMany("WatchHistories")
                        .HasForeignKey("EpisodeId");

                    b.HasOne("StreamingMovie.Domain.Entities.Movie", "Movie")
                        .WithMany("WatchHistories")
                        .HasForeignKey("MovieId");

                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("WatchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("StreamingMovie.Domain.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Actor", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("SeriesActors");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Category", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("SeriesCategories");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Comment", b =>
                {
                    b.Navigation("CommentReactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Country", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Director", b =>
                {
                    b.Navigation("MovieDirectors");

                    b.Navigation("SeriesDirectors");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Episode", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EpisodeVideos");

                    b.Navigation("WatchHistories");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("MovieActors");

                    b.Navigation("MovieCategories");

                    b.Navigation("MovieDirectors");

                    b.Navigation("MovieVideos");

                    b.Navigation("PlaylistItems");

                    b.Navigation("Ratings");

                    b.Navigation("WatchHistories");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Playlist", b =>
                {
                    b.Navigation("PlaylistItems");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.Series", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("Favorites");

                    b.Navigation("PlaylistItems");

                    b.Navigation("Ratings");

                    b.Navigation("SeriesActors");

                    b.Navigation("SeriesCategories");

                    b.Navigation("SeriesDirectors");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.User", b =>
                {
                    b.Navigation("CommentReactions");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Notifications");

                    b.Navigation("Playlists");

                    b.Navigation("Ratings");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");

                    b.Navigation("WatchHistories");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.VideoQuality", b =>
                {
                    b.Navigation("EpisodeVideos");

                    b.Navigation("MovieVideos");
                });

            modelBuilder.Entity("StreamingMovie.Domain.Entities.VideoServer", b =>
                {
                    b.Navigation("EpisodeVideos");

                    b.Navigation("MovieVideos");
                });
#pragma warning restore 612, 618
        }
    }
}
