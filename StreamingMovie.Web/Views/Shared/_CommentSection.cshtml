@model (string TargetType, int TargetId)
@{
    ViewBag.TargetType = Model.TargetType;
    ViewBag.TargetId = Model.TargetId;
}

<div class="anime__details__review">
    <div class="section-title">
        <h5>Reviews</h5>
    </div>
    <div id="commentsList">
        <!-- Dynamic comments will be appended here -->
    </div>
</div>

<div class="anime__details__form">
    <div class="section-title">
        <h5>Your Comment</h5>
    </div>
    <form id="commentForm" action="javascript:void(0);">
        <textarea id="messageInput" placeholder="Your Comment"></textarea>
        <button type="submit"><i class="fa fa-location-arrow"></i> Review</button>
    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    console.log("Initializing comment section...");
    const targetType = '@ViewBag.TargetType';
    const targetId = parseInt('@ViewBag.TargetId');

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/commentHub")
        .build();

    connection.start().then(() => {
        console.log("Connected to SignalR hub");
        connection.invoke("JoinGroup", targetType, targetId);
    }).catch(err => console.error("Connection failed:", err));

    document.getElementById("commentForm").addEventListener("submit", function (e) {
        e.preventDefault();
        const message = document.getElementById("messageInput").value;
        if (message.trim()) {
            connection.invoke("SendComment", targetType, targetId, message);
            document.getElementById("messageInput").value = '';
        }
    });

    connection.on("ReceiveComment", function (comment) {
        const commentHtml = `
            <div class="anime__review__item">
                <div class="anime__review__item__pic">
                    <img src="${comment.avatar}" alt="">
                </div>
                <div class="anime__review__item__text">
                    <h6>${comment.user} - <span>${formatRelativeTime(comment.createdAt)}</span></h6>
                    <p>${comment.content}</p>
                </div>
            </div>`;
        document.getElementById("commentsList").insertAdjacentHTML('beforeend', commentHtml);
    });

    function formatRelativeTime(isoString) {
        const now = new Date();
        const past = new Date(isoString);
        const diffMs = now - past;
        const diffMin = Math.floor(diffMs / 60000);
        if (diffMin < 1) return "Just now";
        if (diffMin < 60) return `${diffMin} minute(s) ago`;
        const diffHrs = Math.floor(diffMin / 60);
        if (diffHrs < 24) return `${diffHrs} hour(s) ago`;
        const diffDays = Math.floor(diffHrs / 24);
        return `${diffDays} day(s) ago`;
    }
</script>
