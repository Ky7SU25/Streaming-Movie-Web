@using StreamingMovie.Application.DTOs
@{
    ViewData["Title"] = "Watching - " + Model.Title;
}
@model MovieVideoDTO

<!-- Include HLS.js library -->
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<!-- Custom Video Player Styles -->
<style>
    .video-player-container {
        position: relative;
        width: 100%;
        background: #000;
        border-radius: 8px;
        overflow: hidden;
        /* Fixed aspect ratio to prevent size changes */
        aspect-ratio: 16/9;
        max-height: 70vh;
        min-height: 400px;
    }

    .video-player {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    /* Initial Play Button Overlay */
    .initial-play-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
        transition: opacity 0.3s ease;
    }

        .initial-play-overlay.hidden {
            opacity: 0;
            pointer-events: none;
        }

    .initial-play-btn {
        width: 80px;
        height: 80px;
        background: rgba(255, 107, 53, 0.9);
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 32px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 20px rgba(255, 107, 53, 0.4);
    }

        .initial-play-btn:hover {
            background: rgba(255, 107, 53, 1);
            transform: scale(1.1);
            box-shadow: 0 6px 30px rgba(255, 107, 53, 0.6);
        }

        .initial-play-btn i {
            margin-left: 4px; /* Slight offset for play icon */
        }

    .video-controls {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(transparent, rgba(0,0,0,0.8));
        padding: 20px 15px 15px;
        transition: opacity 0.3s ease;
    }

    .video-player-container:not(:hover) .video-controls {
        opacity: 0;
    }

    .video-player-container:hover .video-controls {
        opacity: 1;
    }

    .controls-row {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 10px;
    }

    .progress-container {
        flex: 1;
        height: 4px;
        background: rgba(255,255,255,0.3);
        border-radius: 2px;
        cursor: pointer;
        position: relative;
    }

    .progress-bar {
        height: 100%;
        background: #ff6b35;
        border-radius: 2px;
        width: 0%;
        transition: width 0.1s ease;
    }

    .progress-buffer {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        background: rgba(255,255,255,0.5);
        border-radius: 2px;
        width: 0%;
    }

    .control-button {
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 8px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
    }

        .control-button:hover {
            background: rgba(255,255,255,0.2);
        }

    .volume-container {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .volume-slider {
        width: 80px;
        height: 4px;
        background: rgba(255,255,255,0.3);
        border-radius: 2px;
        outline: none;
        appearance: none;
    }

        .volume-slider::-webkit-slider-thumb {
            appearance: none;
            width: 14px;
            height: 14px;
            background: #ff6b35;
            border-radius: 50%;
            cursor: pointer;
        }

    .quality-selector {
        position: relative;
    }

    .quality-button {
        background: rgba(0,0,0,0.7);
        border: 1px solid rgba(255,255,255,0.3);
        color: white;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        font-weight: 500;
    }

    .quality-menu {
        position: absolute;
        bottom: 100%;
        right: 0;
        background: rgba(0,0,0,0.9);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 4px;
        min-width: 100px;
        display: none;
        z-index: 1000;
    }

        .quality-menu.show {
            display: block;
        }

    .quality-option {
        padding: 8px 12px;
        color: white;
        cursor: pointer;
        font-size: 12px;
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

        .quality-option:last-child {
            border-bottom: none;
        }

        .quality-option:hover {
            background: rgba(255,255,255,0.1);
        }

        .quality-option.active {
            background: #ff6b35;
            color: white;
        }

    .time-display {
        color: white;
        font-size: 12px;
        font-weight: 500;
        white-space: nowrap;
    }

    .loading-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        display: none;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255,255,255,0.3);
        border-radius: 50%;
        border-top-color: #ff6b35;
        animation: spin 1s ease-in-out infinite;
    }

    .error-message {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        text-align: center;
        display: none;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<!-- Additional responsive styles -->
<style>
    /* Responsive adjustments for tablets */
    @@media (max-width: 768px) {
        .video-player-container {
            min-height: 300px;
            max-height: 50vh;
        }

        .initial-play-btn {
            width: 60px;
            height: 60px;
            font-size: 24px;
        }

        .controls-row {
            gap: 10px;
        }

        .control-button {
            font-size: 16px;
            padding: 6px;
        }

        .volume-slider {
            width: 60px;
        }
    }

    /* Responsive adjustments for mobile */
    @@media (max-width: 480px) {
        .video-player-container {
            min-height: 250px;
            max-height: 40vh;
        }

        .initial-play-btn {
            width: 50px;
            height: 50px;
            font-size: 20px;
        }

        .time-display {
            font-size: 10px;
        }

        .quality-button {
            font-size: 10px;
            padding: 4px 8px;
        }
    }
</style>

<!-- Breadcrumb Begin -->
<div class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__links">
                    <a href="/"><i class="fa fa-home"></i> Home</a>
                    <a href="/movies">Movies</a>
                    <span>@Model.Title</span>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<!-- Anime Section Begin -->
<section class="anime-details spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <!-- Enhanced Video Player -->
                <div class="video-player-container">
                    <video id="videoPlayer" class="video-player" poster="@Model.Thumbnail" preload="metadata">
                        <p style="color: white; text-align: center; padding: 20px;">
                            Your browser does not support the video tag or HLS streaming.
                        </p>
                    </video>

                    <!-- Initial Play Button Overlay -->
                    <div id="initialPlayOverlay" class="initial-play-overlay">
                        <button id="initialPlayBtn" class="initial-play-btn">
                            <i class="fa fa-play"></i>
                        </button>
                    </div>

                    <!-- Loading Overlay -->
                    <div id="loadingOverlay" class="loading-overlay">
                        <div class="loading-spinner"></div>
                        <p style="margin-top: 10px;">Loading video...</p>
                    </div>

                    <!-- Error Message -->
                    <div id="errorMessage" class="error-message">
                        <i class="fa fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 10px;"></i>
                        <p>Unable to load video. Please try again later.</p>
                    </div>

                    <!-- Custom Video Controls -->
                    <div class="video-controls">
                        <div class="controls-row">
                            <!-- Progress Bar -->
                            <div class="progress-container" id="progressContainer">
                                <div class="progress-buffer" id="progressBuffer"></div>
                                <div class="progress-bar" id="progressBar"></div>
                            </div>
                        </div>

                        <div class="controls-row">
                            <!-- Play/Pause Button -->
                            <button class="control-button" id="playPauseBtn">
                                <i class="fa fa-play"></i>
                            </button>

                            <!-- Volume Controls -->
                            <div class="volume-container">
                                <button class="control-button" id="muteBtn">
                                    <i class="fa fa-volume-up"></i>
                                </button>
                                <input type="range" class="volume-slider" id="volumeSlider" min="0" max="100" value="100">
                            </div>

                            <!-- Time Display -->
                            <div class="time-display">
                                <span id="currentTime">00:00</span> / <span id="duration">00:00</span>
                            </div>

                            <!-- Spacer -->
                            <div style="flex: 1;"></div>

                            <!-- Quality Selector -->
                            <div class="quality-selector">
                                <button class="quality-button" id="qualityBtn">Auto</button>
                                <div class="quality-menu" id="qualityMenu">
                                    <div class="quality-option active" data-quality="auto">Auto</div>
                                    <div class="quality-option" data-quality="1080p">1080p</div>
                                    <div class="quality-option" data-quality="720p">720p</div>
                                    <div class="quality-option" data-quality="360p">360p</div>
                                </div>
                            </div>

                            <!-- Fullscreen Button -->
                            <button class="control-button" id="fullscreenBtn">
                                <i class="fa fa-expand"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Movie Information -->
                <div class="anime__details__episodes mt-4">
                    <div class="section-title">
                        <h5>@Model.Title</h5>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="text-white-50">@Model.Description</p>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-8">
                @* <div class="anime__details__review">
                    <div class="section-title">
                        <h5>Comments</h5>
                    </div>
                    @await Component.InvokeAsync("Comment", new { slug = "breaking-bad", episodeId = 1 })
                </div> *@


                @await Html.PartialAsync("_CommentSection", ("movie", Model.Id))
            </div>
        </div>
    </div>
</section>
<!-- Anime Section End -->
<!-- Enhanced Video Player JavaScript -->
<script>
    class VideoPlayerController {
        constructor() {
            this.video = document.getElementById('videoPlayer');
            this.hls = null;
            this.currentQuality = 'auto';
            this.isPlaying = false;
            this.isDragging = false;
            this.hasStartedPlaying = false;

            // Generate video sources based on Model.VideoUrl pattern
            this.baseVideoUrl = '@Html.Raw(Model.VideoUrl)';
            this.videoSources = this.generateVideoSources(this.baseVideoUrl);

            console.log('🎥 Generated video sources:', this.videoSources);

            this.initializePlayer();
            this.bindEvents();
        }

        generateVideoSources(baseUrl) {
            if (!baseUrl) {
                return {
                    master: '',
                    '1080p': '',
                    '720p': '',
                    '360p': ''
                };
            }

            // Extract base path from URL like: https://minio.ngdat.io.vn/movies/movies/2025/73/video/360p.m3u8
            // Result should be: https://minio.ngdat.io.vn/movies/movies/2025/73/video
            let basePath = baseUrl;

            // Remove file name and extension if present
            if (basePath.includes('.m3u8') || basePath.includes('.mp4')) {
                const lastSlashIndex = basePath.lastIndexOf('/');
                basePath = basePath.substring(0, lastSlashIndex);
            }

            // Remove quality folder if present (like /360p, /720p, etc.)
            if (basePath.endsWith('/360p') || basePath.endsWith('/720p') || basePath.endsWith('/1080p')) {
                const lastSlashIndex = basePath.lastIndexOf('/');
                basePath = basePath.substring(0, lastSlashIndex);
            }

            return {
                master: `${basePath}/master.m3u8`,
                '1080p': `${basePath}/1080p.m3u8`,
                '720p': `${basePath}/720p.m3u8`,
                '360p': `${basePath}/360p.m3u8`
            };
        }

        initializePlayer() {
            console.log('🎥 Initializing video player...');
            console.log('📊 Available video sources:', this.videoSources);

            // Don't auto-load video, wait for user interaction
            this.video.preload = 'metadata';

            // Hide loading initially
            this.hideLoading();
        }

        startVideoPlayback() {
            console.log('🚀 Starting video playback...');
            this.showLoading();

            if (Hls.isSupported()) {
                console.log('✅ HLS is supported');
                this.hls = new Hls({
                    enableWorker: true,
                    lowLatencyMode: false,
                    backBufferLength: 90
                });

                // Use master playlist for auto quality
                const videoUrl = this.videoSources.master || this.videoSources['720p'];

                console.log('🔗 Loading video URL:', videoUrl);

                this.hls.loadSource(videoUrl);
                this.hls.attachMedia(this.video);

                this.hls.on(Hls.Events.MANIFEST_PARSED, () => {
                    console.log('✅ HLS manifest parsed');
                    this.hideLoading();
                    this.video.play().then(() => {
                        this.hideInitialPlayOverlay();
                        this.hasStartedPlaying = true;
                    }).catch(err => {
                        console.error('Error playing video:', err);
                        this.handleError();
                    });
                });

                this.hls.on(Hls.Events.ERROR, (event, data) => {
                    console.error('❌ HLS error:', data);
                    if (data.fatal) {
                        this.handleError();
                    }
                });

            } else if (this.video.canPlayType('application/vnd.apple.mpegurl')) {
                console.log('✅ Native HLS support');
                const videoUrl = this.videoSources.master || this.videoSources['720p'];
                this.video.src = videoUrl;
                this.hideLoading();
                this.video.play().then(() => {
                    this.hideInitialPlayOverlay();
                    this.hasStartedPlaying = true;
                }).catch(err => {
                    console.error('Error playing video:', err);
                    this.handleError();
                });
            } else {
                console.log('⚠️ HLS not supported, using fallback');
                // Fallback to mp4 if available
                const mp4Url = this.baseVideoUrl.replace('.m3u8', '.mp4');
                this.video.src = mp4Url;
                this.hideLoading();
                this.video.play().then(() => {
                    this.hideInitialPlayOverlay();
                    this.hasStartedPlaying = true;
                }).catch(err => {
                    console.error('Error playing video:', err);
                    this.handleError();
                });
            }
        }

        bindEvents() {
            // Initial Play Button
            document.getElementById('initialPlayBtn').addEventListener('click', () => {
                this.startVideoPlayback();
            });

            // Play/Pause Button
            document.getElementById('playPauseBtn').addEventListener('click', () => {
                if (!this.hasStartedPlaying) {
                    this.startVideoPlayback();
                } else {
                    this.togglePlayPause();
                }
            });

            // Video click to play/pause
            this.video.addEventListener('click', () => {
                if (!this.hasStartedPlaying) {
                    this.startVideoPlayback();
                } else {
                    this.togglePlayPause();
                }
            });

            // Progress bar
            const progressContainer = document.getElementById('progressContainer');
            progressContainer.addEventListener('click', (e) => {
                this.seek(e);
            });

            progressContainer.addEventListener('mousedown', () => {
                this.isDragging = true;
            });

            document.addEventListener('mousemove', (e) => {
                if (this.isDragging) {
                    this.seek(e);
                }
            });

            document.addEventListener('mouseup', () => {
                this.isDragging = false;
            });

            // Volume controls
            document.getElementById('muteBtn').addEventListener('click', () => {
                this.toggleMute();
            });

            document.getElementById('volumeSlider').addEventListener('input', (e) => {
                this.setVolume(e.target.value / 100);
            });

            // Quality selector
            document.getElementById('qualityBtn').addEventListener('click', () => {
                this.toggleQualityMenu();
            });

            document.querySelectorAll('.quality-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    const quality = e.target.dataset.quality;
                    this.changeQuality(quality);
                });
            });

            // Fullscreen
            document.getElementById('fullscreenBtn').addEventListener('click', () => {
                this.toggleFullscreen();
            });

            // Video events
            this.video.addEventListener('loadstart', () => this.showLoading());
            this.video.addEventListener('canplay', () => this.hideLoading());
            this.video.addEventListener('waiting', () => this.showLoading());
            this.video.addEventListener('playing', () => this.hideLoading());

            this.video.addEventListener('timeupdate', () => {
                this.updateProgress();
            });

            this.video.addEventListener('loadedmetadata', () => {
                this.updateDuration();
            });

            this.video.addEventListener('progress', () => {
                this.updateBuffer();
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.target.tagName.toLowerCase() !== 'input' && e.target.tagName.toLowerCase() !== 'textarea') {
                    this.handleKeyboard(e);
                }
            });

            // Hide quality menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.quality-selector')) {
                    document.getElementById('qualityMenu').classList.remove('show');
                }
            });
        }

        hideInitialPlayOverlay() {
            const overlay = document.getElementById('initialPlayOverlay');
            overlay.classList.add('hidden');
            setTimeout(() => {
                overlay.style.display = 'none';
            }, 300);
        }

        togglePlayPause() {
            if (this.video.paused) {
                this.video.play();
                document.getElementById('playPauseBtn').innerHTML = '<i class="fa fa-pause"></i>';
                this.isPlaying = true;
            } else {
                this.video.pause();
                document.getElementById('playPauseBtn').innerHTML = '<i class="fa fa-play"></i>';
                this.isPlaying = false;
            }
        }

        seek(e) {
            const progressContainer = document.getElementById('progressContainer');
            const rect = progressContainer.getBoundingClientRect();
            const percent = (e.clientX - rect.left) / rect.width;
            const seekTime = percent * this.video.duration;

            if (!isNaN(seekTime)) {
                this.video.currentTime = seekTime;
            }
        }

        toggleMute() {
            const muteBtn = document.getElementById('muteBtn');
            const volumeSlider = document.getElementById('volumeSlider');

            if (this.video.muted) {
                this.video.muted = false;
                muteBtn.innerHTML = '<i class="fa fa-volume-up"></i>';
                volumeSlider.value = this.video.volume * 100;
            } else {
                this.video.muted = true;
                muteBtn.innerHTML = '<i class="fa fa-volume-off"></i>';
            }
        }

        setVolume(volume) {
            this.video.volume = volume;
            this.video.muted = volume === 0;

            const muteBtn = document.getElementById('muteBtn');
            if (volume === 0) {
                muteBtn.innerHTML = '<i class="fa fa-volume-off"></i>';
            } else if (volume < 0.5) {
                muteBtn.innerHTML = '<i class="fa fa-volume-down"></i>';
            } else {
                muteBtn.innerHTML = '<i class="fa fa-volume-up"></i>';
            }
        }

        toggleQualityMenu() {
            const menu = document.getElementById('qualityMenu');
            menu.classList.toggle('show');
        }

        changeQuality(quality) {
            console.log(`🎯 Changing quality to: ${quality}`);

            if (!this.hasStartedPlaying) {
                this.currentQuality = quality;
                return;
            }

            const currentTime = this.video.currentTime;
            const wasPlaying = !this.video.paused;

            this.showLoading();

            let videoUrl;
            if (quality === 'auto') {
                videoUrl = this.videoSources.master;
            } else {
                videoUrl = this.videoSources[quality];
            }

            if (this.hls) {
                this.hls.loadSource(videoUrl);

                this.video.addEventListener('loadeddata', () => {
                    this.video.currentTime = currentTime;
                    if (wasPlaying) {
                        this.video.play();
                    }
                    this.hideLoading();
                }, { once: true });
            } else {
                this.video.src = videoUrl;
                this.video.addEventListener('loadeddata', () => {
                    this.video.currentTime = currentTime;
                    if (wasPlaying) {
                        this.video.play();
                    }
                    this.hideLoading();
                }, { once: true });
            }

            // Update UI
            this.currentQuality = quality;
            const qualityText = quality === 'auto' ? 'Auto' : quality.toUpperCase();
            document.getElementById('qualityBtn').textContent = qualityText;

            document.querySelectorAll('.quality-option').forEach(option => {
                option.classList.remove('active');
            });
            document.querySelector(`[data-quality="${quality}"]`).classList.add('active');

            document.getElementById('qualityMenu').classList.remove('show');
        }

        toggleFullscreen() {
            const container = document.querySelector('.video-player-container');

            if (!document.fullscreenElement) {
                container.requestFullscreen().catch(err => {
                    console.error('Error attempting to enable fullscreen:', err);
                });
                document.getElementById('fullscreenBtn').innerHTML = '<i class="fa fa-compress"></i>';
            } else {
                document.exitFullscreen();
                document.getElementById('fullscreenBtn').innerHTML = '<i class="fa fa-expand"></i>';
            }
        }

        updateProgress() {
            if (!this.isDragging) {
                const percent = (this.video.currentTime / this.video.duration) * 100;
                document.getElementById('progressBar').style.width = `${percent}%`;
            }

            document.getElementById('currentTime').textContent = this.formatTime(this.video.currentTime);
        }

        updateDuration() {
            document.getElementById('duration').textContent = this.formatTime(this.video.duration);
        }

        updateBuffer() {
            if (this.video.buffered.length > 0) {
                const bufferedEnd = this.video.buffered.end(this.video.buffered.length - 1);
                const percent = (bufferedEnd / this.video.duration) * 100;
                document.getElementById('progressBuffer').style.width = `${percent}%`;
            }
        }

        handleKeyboard(e) {
            switch(e.code) {
                case 'Space':
                    e.preventDefault();
                    if (!this.hasStartedPlaying) {
                        this.startVideoPlayback();
                    } else {
                        this.togglePlayPause();
                    }
                    break;
                case 'ArrowLeft':
                    e.preventDefault();
                    if (this.hasStartedPlaying) {
                        this.video.currentTime -= 10;
                    }
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    if (this.hasStartedPlaying) {
                        this.video.currentTime += 10;
                    }
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    this.setVolume(Math.min(1, this.video.volume + 0.1));
                    document.getElementById('volumeSlider').value = this.video.volume * 100;
                    break;
                case 'ArrowDown':
                    e.preventDefault();
                    this.setVolume(Math.max(0, this.video.volume - 0.1));
                    document.getElementById('volumeSlider').value = this.video.volume * 100;
                    break;
                case 'KeyF':
                    e.preventDefault();
                    this.toggleFullscreen();
                    break;
                case 'KeyM':
                    e.preventDefault();
                    this.toggleMute();
                    break;
            }
        }

        formatTime(seconds) {
            if (isNaN(seconds)) return '00:00';

            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);

            if (hours > 0) {
                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            } else {
                return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
        }

        showLoading() {
            document.getElementById('loadingOverlay').style.display = 'block';
            document.getElementById('errorMessage').style.display = 'none';
        }

        hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        handleError() {
            this.hideLoading();
            document.getElementById('errorMessage').style.display = 'block';
            console.error('❌ Fatal video error occurred');
        }
    }

    // Initialize player when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        console.log('🚀 Initializing video player controller...');
        console.log('🎬 Movie data:', {
            title: '@Model.Title',
            videoUrl: '@Model.VideoUrl'
        });

        window.videoPlayer = new VideoPlayerController();
    });
</script>